// Carrega as variÃ¡veis de ambiente definidas no arquivo .env
require('dotenv').config();
 
// Importa o framework Express para criar a aplicaÃ§Ã£o web/API
const express = require('express');
 
// Importa a instÃ¢ncia do Sequelize configurada para conexÃ£o com o banco PostgreSQL
const sequelize = require('./config/db');
 
// Importa o middleware CORS para configurar permissÃµes de acesso entre domÃ­nios
const cors = require('cors');
 
// Importa as rotas modularizadas da aplicaÃ§Ã£o
const userRoutes = require('./routes/userRoutes');
const contactRoutes = require('./routes/contactRoutes');
const authRoutes = require('./routes/authRoutes');
 
// Cria uma instÃ¢ncia do app Express
const app = express();
 
// Configura o middleware CORS para aceitar requisiÃ§Ãµes do frontend (localhost:5173)
// Permite os mÃ©todos GET, POST, PUT, DELETE e aceita credenciais (cookies, auth headers)
app.use(cors({                            
  origin: 'https://frontend-portal-turismo-git-main-nalauraoxs-projects.vercel.app/', // utilizar o link da vercel de vocÃªs        
  methods: ['GET','POST','PUT','DELETE'],
  credentials: true
}));
 
// Middleware que transforma o corpo das requisiÃ§Ãµes com JSON em objeto JavaScript acessÃ­vel via req.body
app.use(express.json());
 
// Rota base da API para teste rÃ¡pido â€” retorna texto simples confirmando que API estÃ¡ funcionando
app.get('/', (req, res) => res.send('API funcionando'));
 
// ConfiguraÃ§Ã£o das rotas da API:
// Toda requisiÃ§Ã£o para /api/users serÃ¡ encaminhada para userRoutes
app.use('/api/users', userRoutes);
 
// Toda requisiÃ§Ã£o para /api/contacts serÃ¡ encaminhada para contactRoutes
app.use('/api/contacts', contactRoutes);
 
// Toda requisiÃ§Ã£o para /api/auth serÃ¡ encaminhada para authRoutes
app.use('/api/auth', authRoutes);
 
// Porta definida no arquivo .env onde o servidor vai escutar as requisiÃ§Ãµes
const PORT = process.env.PORT;
 
// Primeiro tenta conectar ao banco de dados PostgreSQL usando Sequelize
sequelize.authenticate()
  .then(() => {
    console.log('ğŸŸ¢ Conectado ao banco PostgreSQL!');
 
    // Sincroniza os modelos Sequelize com o banco (cria tabelas, etc)
    return sequelize.sync();
  })
  .then(() => {
    console.log('âœ… Modelos sincronizados!');
 
    // Inicia o servidor Express na porta definida
    app.listen(PORT, () => console.log(`ğŸš€ Servidor rodando na porta ${PORT}`));
  })
  .catch(err =>
    // Caso ocorra erro na conexÃ£o ou sincronizaÃ§Ã£o, exibe no console
    console.error('ğŸ”´ Erro ao conectar/sincronizar:', err)
  );